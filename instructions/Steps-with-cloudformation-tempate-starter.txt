Web application protection at Edge

In this demo we will show how we can use AWS Web Application Firewall (WAF) and CloudFront to protect a web site hosted:
1 - In an S3 bucket
2 - In an EC2 instance behind an Internet-facing Application Load Balancer

To perform steps required for this demo, you'll need to:
- Have access to an AWS account
- Enough permissions to create or modify
	- A CloudFront distribution
	- An AWS WAF Web ACL
	- An S3 bucket
	- A VPC with at least 1 public subnet and 1 private subnet
	- Security groups
	- An SSH key pair
	- An EC2 instance connect endpoint
	- An S3 Gateway endpoint
	- An EC2 instance
	- A target group
	- An Internet-facing Application Load Balancer
	- An IAM role for EC2 with s3 sync permissions
- Access to AWS CloudShell or to a Linux server (EC2, Cloud9, etc..) with Internet access (to perform curl requests when testing rate limiting later on in the lab)

I - Initialize infrastructure

Have a look at the folder "infrastructure", it should have this tree structure:

infrastructure/
	- web-security-at-edge-demo-us-east-1.yaml
	- web-security-at-edge-demo.yaml

1 - Install workshop CloudFormation resources

If you're performing the demo in us-east-1 region run "web-security-at-edge-demo-us-east-1.yaml", you'll get an empty global WebACL created for you.

If you're performing the demo in other regions run "web-security-at-edge-demo.yaml". You'll have to manually create an empty global WebACL afterwards.

So go to CloudFormation
Click on "Create stack"
- Prepare template: Choose an existing template
- Template source: Upload a template file
- Upload your file, then click on "Next"
- Stack-name: workshop-edge-security
click on "Next"
click on "Next"
Scroll down and click on the checkbox "I acknowledge that AWS CloudFormation might create IAM resources."
click on "Submit"

It should take around 10 minutes to provision all resources.

If you used web-security-at-edge-demo.yaml, go to step 2. Otherwise go directly to part II.

2 - Create an empty Global WebACL (Optional)

Go to WAF (Web Application Firewall console)
Click on "Create web ACL"
Web ACL details:
- Resource type: choose Amazon CloudFront distributions
- Name: WorkshopWebACL
click on "Next"
click on "Next"
click on "Next"
click on "Next"
Click on "Create web ACL"		

II - Test the application

1 -  S3 static website
Open your AWS Console and go to CloudFormation
Choose your stack
Go to Output tab
Copy the link for WorkshopS3WebsiteURL
Paste it in a browser (use private mode)

2 - ALB static website
Open your AWS Console and go to CloudFormation
Choose your stack
Go to Output tab
Copy the link for WorkshopLoadBalancerDNSName
Paste it in a browser (use private mode)

III - Distribute website content through CloudFront

1 - Create a CloudFront distribution with our S3 bucket as origin

Go to CloudFront console
Click on "Create distribution"

Origin:
- Origin domain: choose your S3 bucket endpoint
- Name: s3-web-security-demo
- Origin access: Public

- Add custom header
	+ Header name: Referer
	+ Value: CLOUDFRONT-DISTRIBUTION-SECRET-VALUE

Default cache behavior:
- Viewer protocol policy: Redirect HTTP to HTTPS
- Allowed HTTP methods: GET, HEAD
- Cache key and origin requests: Cache policy and origin request policy (recommended)
- Cache policy: CachingOptimized (Recommended for S3)

Web Application Firewall (WAF): Enable security protections
- Choose Use existing WAF configuration
- Select WorkshopWebACL

Settings:
- Default root object: index.html

Scroll down, and click on "Create distribution"

While the distribution is being deployed, copy the distribution domain name, and paste in a notepad to be used later.

2 - Create a CloudFront distribution with our WorkshopLoadBalancer as origin

Go back to CloudFront console
Click on "Create distribution"

Origin:
- Origin domain: choose your WorkshopLoadBalancer DNS name
- Protocol: HTTP only
- Name: web-security-demo-alb

- Add custom header
	+ Header name: x-cloudfront-secret
	+ Value: CLOUDFRONT-DISTRIBUTION-SECRET-VALUE

Default cache behavior:
- Viewer protocol policy: Redirect HTTP to HTTPS
- Allowed HTTP methods: GET, HEAD
- Cache key and origin requests: Cache policy and origin request policy (recommended)
- Cache policy: UseoriginCacheControlHeaders (Recommended for Elastic Load Balancing)
- Origin request policy: All viewers (Recommended for Elastic Load Balancing)

Web Application Firewall (WAF): Enable security protections
- Choose Use existing WAF configuration
- Select WorkshopWebACL

Settings:
- Default root object: index.html

Scroll down, and click on "Create distribution"

While the distribution is being deployed, copy the distribution domain name, and paste in a notepad to be used later.

3 - Test access from CloudFront (Assuming both distributions are deployed)

Paste S3 distribution domain name in a browser (private mode) and verify you have access the website content.

Paste ALB distribution domain name in a browser (private mode) and verify you have access the website content.


IV - Block direct access from S3 website endpoint and WorkshopLoadBalancer DNS name

1 - Block direct access from S3 website

Go to S3 Console, and choose your bucket
Go to tab "Permissions" and edit the bucket policy (replace the placeholders with appropriate data) if not done automatically by CloudFront

{
  "Version":"2012-10-17",
  "Id":"HTTP GET requests from specific referer",
  "Statement":[
    {
      "Sid":"AllowGetFromSpecificReferer",
      "Effect":"Allow",
      "Principal":"*",
      "Action":["s3:GetObject","s3:GetObjectVersion"],
      "Resource":"arn:aws:s3:::REPLACE_WITH_YOUR_BUCKET_NAME/*",
      "Condition":{
        "StringLike":{"aws:Referer":["CLOUDFRONT-DISTRIBUTION-SECRET-VALUE"]}
      }
    }
  ]
}

Copy the provided S3 website URL and paste it in a browser (use private mode)
Assert you get a 403 Forbidden - Access Denied message

Paste S3 distribution domain name in a browser (private mode)
Assert you have access the website content.

2 - Block direct access from WorkshopLoadBalancer DNS name

Go to EC2 console
On the left menu, under "Load Balancing", choose "Load balancers"
Click on WorkshopLoadBalancer
Go to tab Listeners and rules
Click on text "HTTP:80"
On tab "Listener rules" click on "Default", then choose Actions/Edit rule

Listener details:
- Routing actions: Return fixed response
- Response code: 403
- content type: text/html
- Response body: paste the following
<html>
<head><title>403 Forbidden</title></head>
<body>
	<h1>403 Forbidden</h1>
	<ul>
		<li>Code: AccessDenied</li>
		<li>Message: Access Denied</li>
	</ul>
	<hr/>
</body>
</html>

Click on "Save changes"

Click on Add rule

Name and tags: AllowAccessFromCloudFront
Click on Add condition
- Rule condition types: HTTP header
- HTTP header name: x-cloudfront-secret
- HTTP header value: CLOUDFRONT-DISTRIBUTION-SECRET-VALUE

Click on "confirm"

Click on "Next"
Actions:
- Routing actions: Forward to target groups
- Target group: WorkshopTargetGroup

Click on "Next"

Priority: 1

Click on "Next"
Click on "Create"

Go back to WorkshopLoadBalancer
Copy the provided DNS name and paste it in a browser (use private mode)
Assert you get a 403 Forbidden - Access Denied message

Paste ALB distribution domain name in a browser (private mode)
Assert you have access the website content.

V - Now let's take a look at some vulnerabilities

1 - XSS

- Explain the problem

Cross-Site Scripting (XSS) is a type of security vulnerability typically found in web applications. 
It allows attackers to inject malicious scripts into content from otherwise trusted websites. 
These scripts can then execute in the user's browser, potentially leading to the compromise of user data, session hijacking, and more.

- Show an example on both sites

<script>alert("XSS Attack Demo!!")</script>

- Mitigations:

To prevent XSS attacks, you should:
Sanitize Input: Remove or encode potentially dangerous characters from user input.
Use Content Security Policy (CSP): Define approved sources for content that browsers should enforce.
Validate and Encode Output: Ensure that any user input included in the HTML output is properly encoded.

- Add a rule in a WorkshopWebACL to solve it

Go to WAF (Web Application Firewall console)
Click on "Web ACLs"
Choose WorkshopWebACL
Go to tab Rules
Click on "Add rules / Add managed rule groups"
Expand "AWS managed rule groups"
Scroll down to "Free rule groups"
Enable "Core rule set". 

It Contains rules that are generally applicable to web applications, providing protection against exploitation of a wide range of vulnerabilities, such as XSS.

Scroll down and click on "Add rules"
Scroll down and click on "Next"
Click on "Next"
Click on "Next"
Review and click on "Create web ACL"

- Show the solution on both sites

<script>alert("XSS Attack Demo!!")</script>

2 - SQL injection

- Explain the problem

SQL Injection is a type of security vulnerability that occurs when an attacker can manipulate an SQL query by injecting malicious SQL code into input fields. 
This can result in unauthorized access to the database, allowing attackers to retrieve, modify, or delete data. 
SQL Injection exploits the improper handling of input data and insufficient input validation.

- Show an example on both sites

Username: admin
Password: adminpass

Username: admin
Password: badpassword

Username: admin
Password: anything' OR 'a'='a

Username: admin' --
Password: anything

- Mitigations:

Use Prepared Statements: Ensure queries use parameterized inputs.
Sanitize Input: Validate and sanitize all user inputs.
Least Privilege: Use database accounts with the least privilege necessary.
Stored Procedures: Use stored procedures to abstract and encapsulate database access.
Error Handling: Avoid displaying detailed error messages that reveal SQL structure.

- Add a rule in WorkshopWebACL to solve it

Go to WAF (Web Application Firewall console)
On left menu, under AWS WAF, click on "Web ACLs"
Click on "WorkshopWebACL"
On tab "Rules", choose "Add rules / Add managed rule groups"
Expand "AWS managed rule groups"
Scroll down to "Free rule groups"
Enable "SQL database;"

Scroll down and click on "Add rules"
Click on "Save"

- Show the solution on both sites

Username: admin
Password: adminpass

Username: admin
Password: badpassword

Username: admin
Password: anything' OR 'a'='a

Username: admin' --
Password: anything

3 - Header Injection Attack

- Explain the problem

Description: 
This occurs when an attacker includes malicious data in HTTP headers, aiming to manipulate the server's response headers. 
If the server does not properly handle or sanitize headers, this can lead to various exploits like HTTP response splitting, cache poisoning, or cross-site scripting (XSS).

Impact: 
The potential consequences of header injection can range from disrupting legitimate user sessions to more severe exploits, including hijacking user sessions, redirecting users to malicious sites, or injecting executable scripts.

- Show an example on both sites

Header: X-XSS-Header
Value: <script>alert("Attacked by Demo")</script>

Header: X-SQLI-Password
Value: password' OR 'a'='a

Header: X-Attack-Demo
Value: anything

- Mitigations:

Sanitize and Validate Headers: Ensure that any custom headers received are validated and sanitized to remove any malicious content.
Input Validation: Apply strict validation rules for headers, only allowing expected values and formats.
Content Security Policy (CSP): Implement CSP to mitigate potential XSS attacks stemming from header manipulation.
Proper Logging Practices: Ensure that logs are securely handled and that any user input included in logs is sanitized to prevent log injection attacks.

- Add a rule in WorkshopWebACL to solve it

Go to WAF (Web Application Firewall console)
On left menu, under AWS WAF, click on "Web ACLs"
Click on "WorkshopWebACL"
On tab "Rules", choose "Add rules / Add my own rules and rule groups"
Rule type: choose "Rule builder"

Rule component:
- Name: BlockHeaderInjection-Rule
- Type: Regular rule
- If a request: matches at least one of the statements (OR)

Statement 1 component:
- Inspect: All headers
- Headers match scope: Values
- Content to inspect: All headers
- Match type: Contains SQL injection attacks
- Oversize handling: Match - Treat the web request as matching the rule statement

Statement 2 component:
- Inspect: All headers
- Headers match scope: Values
- Content to inspect: All headers
- Match type: Contains XSS injection attacks
- Oversize handling: Match - Treat the web request as matching the rule statement

Statement 3 component:
- Inspect: All headers
- Headers match scope: Keys
- Content to inspect: All headers
- Match type: Contains string
- String to match: attack
- Text transformation: Lowercase
- Oversize handling: Match - Treat the web request as matching the rule statement

Then Action: Block
Click on "Add rule"
Move up BlockHeaderInjection-Rule to the top of "Rules" component
Click on "Save"

- Show the solution on both sites

Header: X-XSS-Header
Value: <script>alert("Attacked by Demo")</script>

Header: X-SQLI-Password
Value: password' OR 'a'='a

Header: X-Attack-Demo
Value: anything


WEBSITE_URL=https://xxxxxxxxxxx.cloudfront.net/
curl -H 'X-XSS-Injection: <script>alert("Attacked by Demo")</script>' $WEBSITE_URL
curl -H 'X-SQL-Injection: password'\'' OR '\''a\'='\''a' $WEBSITE_URL
curl -H 'X-SQL-Injection: admin'\''--' $WEBSITE_URL
curl -H 'X-Book-Attack: test' $WEBSITE_URL


4 - HTML code injection

- Explain the problem

HTML code injection occurs when an attacker is able to insert malicious HTML content into a web page, which can be executed by the browser of anyone viewing the page. 
This type of vulnerability is often the result of failing to properly sanitize user input. 
HTML injection can lead to various attacks, including cross-site scripting (XSS), manipulation of page content, and more.

- Show an example on both sites

<html><body><h1>HTML code injection!</h1></body></html>

- Mitigations:

Sanitize Input: Use functions like htmlspecialchars to convert special characters into their HTML-safe equivalents.
Validate Input: Ensure that user input conforms to expected formats and lengths.
Output Encoding: Always encode user input before rendering it in the HTML content.
Content Security Policy (CSP): Use CSP headers to restrict the sources from which content can be loaded.

- Add a rule in WorkshopWebACL to solve it

Go to WAF (Web Application Firewall console)

On left menu, under AWS WAF, click on "Regex pattern sets"
Click on "Create regex pattern set"
Regex pattern set name: Workshop-HTML-Tags
Region: Global (CloudFront)
Regular expressions: copy the following
<html>
<body>
<script>
<h1>
<h2>
<h3>
<div>
<p>
<a>
<span>

Click on "Create regex pattern set" 

On left menu, under AWS WAF, click on "Web ACLs"
Click on "WorkshopWebACL"
On tab "Rules", choose "Add rules / Add my own rules and rule groups"
Rule type: choose "Rule builder"

Rule component:
- Name: BlockQueryParamHTMLInjection-Rule
- Type: Regular rule
- If a request: matches the statement

Statement component:
- Inspect: All query parameters
- Match type: Matches pattern from regex pattern set
- Regex pattern set: Workshop-HTML-Tags
- Text transformation: URL decode

Then Action: Block
Click on "Add rule"
Move up BlockQueryParamHTMLInjection-Rule to the top of "Rules" component
Click on "Save"

- Show the solution on both sites

<html><body><h1>HTML code injection!</h1></body></html>

5 - HTTP flood

- Explain the problem

HTTP Flood attacks are a type of Distributed Denial of Service (DDoS) attack where an attacker sends a large number of HTTP requests to a web server with the intent to overwhelm the server's resources and make it unavailable to legitimate users. 
These attacks exploit the HTTP protocol, often targeting web applications with complex URLs or forms that require significant server processing.

Types of HTTP Flood Attacks:

GET Flood: The attacker sends a large number of HTTP GET requests to fetch resources from the server.
POST Flood: The attacker sends a large number of HTTP POST requests, often with large payloads, to submit data to the server.
Slowloris: The attacker sends HTTP requests slowly, keeping many connections open and consuming server resources.

- Mitigations:

To protect against HTTP Flood attacks, various strategies can be employed:

Rate Limiting: Restrict the number of requests a single IP address can make in a given time period.
CAPTCHA: Use CAPTCHA to ensure that requests are coming from real users.
Web Application Firewall (WAF): Deploy a WAF to filter and block malicious traffic.
IP Blacklisting: Identify and block IP addresses that are sending an excessive number of requests.
Content Delivery Network (CDN): Use a CDN to distribute traffic and absorb large volumes of requests.
Behavioral Analysis: Use tools to analyze traffic patterns and identify abnormal behavior indicative of an attack.

- Show an example on both sites

Open a shell (CloudShell, or either in a Linux EC2 instance with internet access)

TEST_URL=https://xxxxxxxxxxxx.cloudfront.net
for ((i=1;i<=250;i++)); do curl  -I -k $TEST_URL; done
curl -s $TEST_URL;

Expect: last curl request is still successful

- Add a rule in WorkshopWebACL to implement Rate Limiting

Go to WAF (Web Application Firewall console)

On left menu, under AWS WAF, click on "Web ACLs"
Click on "WorkshopWebACL"
On tab "Rules", choose "Add rules / Add my own rules and rule groups"
Rule type: choose "Rule builder"

Rule component:
- Name: BlockHTTPFlood-rule
- Type: Rate-based rule

Rate-limiting criteria component:
Rate limit: 200
Evaluation window: 1 minute (60 seconds)
Request aggregation: Source IP address
Scope of inspection and rate limiting: Consider all requests

Then Action: Block
Click on "Add rule"
Move up BlockHTTPFlood-rule to the top of "Rules" component
Click on "Save"

- Show the solution on both sites

Open a shell (CloudShell, or either in a Linux EC2 instance with internet access)

TEST_URL=https://xxxxxxxxxxxx.cloudfront.net
for ((i=1;i<=250;i++)); do curl  -I -k $TEST_URL; done
curl -s $TEST_URL;

Expect: last curl request to be blocked

VI - Prevent access from restricted locations

Go to CloudFront
Select your S3 distribution
Go to tab "Security"
Expand "Security - Web Application Firewall (WAF)"
Expand "CloudFront geographic restrictions"
Click on "Edit" near Country -> "Countries - Edit"
Under restriction type, choose your preferred policy (Allow list or Block list)
Define your policy locations
Save changes
Wait for your distribution to be redeployed
Test the link from a location not matching your policy
Assert the link is not accessible


VII - Clean up

01 - Go to CloudFront
02 - Choose your S3 distribution
03 - Go to tab Security
04 - Disable AWS WAF protection
05 - Go back to your distribution list
06 - Disable your S3 distribution
07 - Repeat steps 2 to 6 with your ALB distribution

Do steps 08 to 13 only if you used web-security-at-edge-demo.yaml, otherwise goto step 14

08 - Go to WAF
09 - Go to Web ACLs
10 - Choose WorkshopWebACL
11 - Go to tab Rules
12 - Delete all rules
13 - Delete WorkshopWebACL

14 - Go to CloudFormation
15 - Delete your workshop stack

16 - Go to WAF
17 - Go to Regex pattern sets
18 - Delete Workshop-HTML-Tags

19 - Go to CloudFront
20 - Select your S3 and ALB distributions
21 - Delete both distributions




